//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
    struct knownAssetTags: Sequence {
      let new = "New"
      func makeIterator() -> IndexingIterator<[String]> {
        [new].makeIterator()
      }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `backgroundColor`.
    var backgroundColor: RswiftResources.ColorResource { .init(name: "backgroundColor", path: [], bundle: bundle) }

    /// Color `cellBackgroundColor`.
    var cellBackgroundColor: RswiftResources.ColorResource { .init(name: "cellBackgroundColor", path: [], bundle: bundle) }

    /// Color `launchScreenBackgroundColor`.
    var launchScreenBackgroundColor: RswiftResources.ColorResource { .init(name: "launchScreenBackgroundColor", path: [], bundle: bundle) }

    /// Color `pageControlColorMain`.
    var pageControlColorMain: RswiftResources.ColorResource { .init(name: "pageControlColorMain", path: [], bundle: bundle) }

    /// Color `pageControlColorSecondary`.
    var pageControlColorSecondary: RswiftResources.ColorResource { .init(name: "pageControlColorSecondary", path: [], bundle: bundle) }

    /// Color `tableBackgroundColor`.
    var tableBackgroundColor: RswiftResources.ColorResource { .init(name: "tableBackgroundColor", path: [], bundle: bundle) }

    /// Color `textColorSecondary`.
    var textColorSecondary: RswiftResources.ColorResource { .init(name: "textColorSecondary", path: [], bundle: bundle) }

    /// Color `textViewBackgroundColor`.
    var textViewBackgroundColor: RswiftResources.ColorResource { .init(name: "textViewBackgroundColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 10 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `easy`.
    var easy: RswiftResources.ImageResource { .init(name: "easy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `extreme`.
    var extreme: RswiftResources.ImageResource { .init(name: "extreme", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hard`.
    var hard: RswiftResources.ImageResource { .init(name: "hard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `insane`.
    var insane: RswiftResources.ImageResource { .init(name: "insane", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo`.
    var logo: RswiftResources.ImageResource { .init(name: "logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `normal`.
    var normal: RswiftResources.ImageResource { .init(name: "normal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shape-false`.
    var shapeFalse: RswiftResources.ImageResource { .init(name: "shape-false", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shape-true`.
    var shapeTrue: RswiftResources.ImageResource { .init(name: "shape-true", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unknown`.
    var unknown: RswiftResources.ImageResource { .init(name: "unknown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "launchScreenBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'launchScreenBackgroundColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}
